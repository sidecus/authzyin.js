{"version":3,"sources":["store/actions.ts","api/Api.ts","store/store.ts","../../src/Requirements.ts","../../src/RequirementEvaluator.ts","../../src/AuthZyinProvider.tsx","../../src/PropNameCamelCase.ts","components/AuthContext.tsx","components/User.tsx","store/selectors.ts","components/Alert.tsx","api/Contract.ts","components/LightTooltip.tsx","components/PlaceComponent.tsx","../../src/Authorize.ts","components/PlaceList.tsx","components/Home.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["SampleActions","policiesApi","process","placesApi","callHttpGetAsync","url","a","fetch","response","ok","json","Error","status","toString","callGetPlaces","Severity","setPlaces","createActionCreator","SetPlaces","setCurrentPlace","SetCurrentPlace","setAlert","SetAlert","actionCreators","getPlaces","dispatch","places","enterPlace","place","console","log","name","id","severity","Info","message","useAppBoundActions","useBoundActions","OperatorType","Direction","placeStateReducer","createSlicedReducer","currentPlace","state","action","payload","alertReducer","rootReducer","combineReducers","alertInfo","sampleStore","createStore","composeWithDevTools","applyMiddleware","thunk","IsOrRequirement","requirement","operator","Or","IsJsonPathRequirement","Equals","Contains","GreaterThan","GreaterThanOrEqualTo","dataJPath","evaluateRequirement","context","resource","result","orRequirement","i","children","length","RequiresRole","roleRequirement","allowedRoles","userRoles","userContext","roles","indexOf","jsonPathRequirement","constValue","value","dataToken","JSONPath","path","data","resourceToken","resourceJPath","left","right","some","x","direction","ContextToResource","AuthZyinReactContext","camelCaseJsonPath","pathLength","nextStart","current","substr","toLowerCase","useAuthZyinContext","reactContext","React","defaultOptions","requestInitFn","Promise","resolve","jsonPathPropToCamelCase","AuthZyinProvider","props","useState","setContext","defaultAuthZyinContext","useEffect","options","handleContext","contextToSave","policies","forEach","p","policy","requirements","r","camelCaseRequirement","request","method","body","undefined","Provider","AuthContext","Card","variant","CardHeader","title","CardContent","src","theme","iconStyle","collapsed","enableClipboard","User","clientContext","Typography","component","age","String","withDriversLicense","withPassport","JSON","stringify","paymentMethods","map","type","placesStateSelector","store","placesSelector","createSelector","alertSelector","AlertBanner","alert","useSelector","Alert","IsBar","hasHappyHour","IsAgeLimitedPlace","maxAge","LightTooltip","withStyles","tooltip","backgroundColor","palette","common","white","color","boxShadow","shadows","fontSize","Tooltip","useStyles","makeStyles","button","margin","spacing","PlaceComponent","classes","authorized","policyObject","filter","useAuthorize","authorize","key","placement","arrow","acceptedPaymentMethods","minAge","Button","className","startIcon","onClick","error","Warn","placelist","display","flexDirection","justifyContent","PlaceList","placesInfo","Home","userName","Grid","container","justify","alignItems","item","xl","darkTheme","createMuiTheme","root","initializeAuthZyinContext","Container","Paper","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","App","document","getElementById","URL","origin","addEventListener","contentType","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"0KAWYA,E,+FCTCC,EAAW,UAAMC,IAAN,kBAClBC,EAAS,UAAMD,IAAN,gBAETE,EAAgB,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACEC,MAAMF,GADR,YACfG,EADe,QAGRC,GAHQ,gCAIJD,EAASE,OAJL,qDAOX,IAAIC,MAAMH,EAASI,OAAOC,YAPf,4CAAH,sDAYTC,EAAa,uCAAG,sBAAAR,EAAA,sEACZF,EAA0BD,GADd,mFAAH,sD,SDNdH,K,sBAAAA,E,kCAAAA,E,qBAAAA,M,KASZ,I,EEFYe,EFENC,EAAYC,YAA6BjB,EAAckB,WAOvDC,EAAkBF,YAA4BjB,EAAcoB,iBAM5DC,EAAWJ,YAAgCjB,EAAcsB,UAgCzDC,EAAiB,CACnBC,UAxBc,WACd,8CAAO,WAAOC,GAAP,eAAAnB,EAAA,sEACkBQ,IADlB,OACGY,EADH,OAEHD,EAAST,EAAUU,IAFhB,2CAAP,uDAwBAL,WACAF,kBACAQ,WAjBe,SAACC,GAChB,OAAO,SAACH,GACJI,QAAQC,IAAR,mBAAwBF,EAAMG,KAA9B,oBACAN,EAASN,EAAgBS,EAAMI,KAC/BP,EAASJ,EAAS,CACdY,SAAUlB,EAASmB,KACnBC,QAAQ,yBAAD,OAA2BP,EAAMG,KAAjC,WAkBNK,EAAqB,kBAAMC,YAAgBd,K,SE1D5CR,K,YAAAA,E,eAAAA,E,eAAAA,M,KAgBZ,IC/BYuB,EAmBAC,EAnBAD,ED+BNE,EAAoBC,YAAoB,CAACC,cAAe,IAAjB,mBACxC1C,EAAckB,UAAY,CACvB,SAACyB,EAAmBC,GAChB,OAAO,2BAAID,GAAX,IAAkBjB,OAAQkB,EAAOC,QAASH,cAAe,OAHxB,cAMxC1C,EAAcoB,gBAAkB,CAC7B,SAACuB,EAAmBC,GAChB,OAAO,2BAAID,GAAX,IAAkBD,aAAcE,EAAOC,aARN,IAgBvCC,EAAeL,YAAoB,CAACR,SAAUlB,EAASmB,KAAMC,QAAS,kCAApC,eACnCnC,EAAcsB,SAAW,CACtB,SAACqB,EAAmBC,GAChB,OAAO,2BAAID,GAAUC,EAAOC,aAQlCE,EAAcC,0BAAgB,CAChCtB,OAAQc,EACRS,UAAWH,IAMFI,EAAcC,sBAAYJ,EAAaK,8BAAoBC,0BAAgBC,O,mDC/C5Ef,SAoCIgB,EAAgBC,GAC5B,OAAOA,EAAYC,WAAanB,EAAaoB,YAOjCC,EAAsBH,GAElC,OACKA,EAAYC,WAAanB,EAAasB,QACnCJ,EAAYC,WAAanB,EAAauB,UACtCL,EAAYC,WAAanB,EAAawB,aACtCN,EAAYC,WAAanB,EAAayB,gCACzCP,EAAmCQ,WAtEhC1B,aACRA,0BAGAA,oCAGAA,eACAA,uBAGAA,iCACAA,mDACAA,2BAMJ,SAAYC,GACRA,6CACAA,6CAFJ,CAAYA,WCNZ,IA2Fa0B,EAAsB,SAAtBA,EACTC,EACAV,EACAW,GAEA,IAAIC,KAYJ,OARIb,EAAgBC,GAChBY,EApFsB,SAC1BF,EACAG,EACAF,GAEA,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAcE,SAASC,OAAQF,IAG/C,GADeL,EAAoBC,EAASG,EAAcE,SAASD,GAAIH,GAGnE,OAAO,EAIf,SAd0B,CAoFSD,EAASV,EAAaW,YDvDnBX,GACtC,OAAOA,EAAYC,WAAanB,EAAamC,aCsDYN,CACpBX,GACjCY,EAvGwB,SAC5BF,EACAQ,GAKA,IAHA,IAAMC,EAAeD,EAAgBC,aAC/BC,EAAYV,EAAQW,YAAYC,MAE7BR,EAAI,EAAGA,EAAIK,EAAaH,OAAQF,IACrC,GAAIM,EAAUG,QAAQJ,EAAaL,KAAO,EAEtC,OAAO,EAIf,SAd4B,CAuGSJ,EAASV,GACnCG,EAAsBH,KAC7BY,EA9C4B,SAChCF,EACAc,EACAb,ODD0CX,ECU1C,GDTOG,EADmCH,ECIRwB,aDHYxB,EAA2CyB,aCIrFd,EAAW,CACPe,MAAOF,EAAoBC,cAI9Bd,EAED,OAAO,EAGX,IAAMgB,EAAYC,YAAS,CACvBC,KAAML,EAAoBhB,UAC1BtD,KAAMwD,EAAQoB,OAEZC,EAAgBH,YAAS,CAC3BC,KAAML,EAAoBQ,cAC1B9E,KAAMyD,IAMV,OAtDkB,SAACsB,EAAqBC,EAAsBjC,GAC9D,IAAKgC,IAASC,GAASD,EAAKjB,QAAU,GAAKkB,EAAMlB,QAAU,EACvD,OAAO,EAGX,OAAQf,GACJ,KAAKnB,EAAasB,OAClB,KAAKtB,EAAawB,YAClB,KAAKxB,EAAayB,qBAEd,OACoB,IAAhB0B,EAAKjB,QACLiB,EAAKjB,SAAWkB,EAAMlB,SACpBf,IAAanB,EAAasB,QAAU6B,EAAK,KAAOC,EAAM,IACnDjC,IAAanB,EAAawB,aAAe2B,EAAK,GAAKC,EAAM,IACzDjC,IAAanB,EAAayB,sBAAwB0B,EAAK,IAAMC,EAAM,IAEhF,KAAKpD,EAAauB,SAEd,OAAwB,IAAjB6B,EAAMlB,QAAgBiB,EAAKE,MAAK,SAACC,UAAeA,IAAMF,EAAM,MACvE,QACI,UArBU,CAmDLV,EAAoBa,YAActD,EAAUuD,kBAAoBX,EAAYI,EAC3EP,EAAoBa,YAActD,EAAUuD,kBAAoBP,EAAgBJ,EAE5DH,EAAoBvB,UA7BtB,CA8CSS,EAASV,EAAaW,IAGxDC,sNC9GP2B,ECNSC,EAAoB,SAACX,GAC9B,IAAKA,EACD,OAAOA,EAMX,IAHA,IAAMY,EAAaZ,EAAKb,OACpBJ,EAAS,GACT8B,EAAY,EACTA,EAAYD,GAAY,CAC3B,IAAIE,EAAUd,EAAKN,QAAQ,IAAKmB,GAGhC9B,GAAUiB,EAAKe,OAAOF,GAFtBC,GAAuB,IAAbA,EAAiBF,EAAaE,EAAU,GAEPD,GACvCC,EAAUF,GAAgC,MAAlBZ,EAAKc,KAE7B/B,GAAUiB,EAAKc,GAASE,cACxBF,KAEJD,EAAYC,EAGhB,OAAO/B,GDaEkC,EAAqB,WAC9B,IAAMC,EAAeR,EACrB,IAAKQ,EACD,MAAM,IAAI5F,MAAM,0EAGpB,OAAO6F,qBAAiBD,IA4BtBE,EAAmD,CACrDpG,IArEkB,oBAsElBqG,cAAe,kBAAMC,QAAQC,QAAQ,KACrCC,4BAOSC,EAAmB,SAC5BC,SAE8BC,mBAAS,IAAhC9C,OAAS+C,OAGVC,EAAyBZ,IAwC/B,OAtCAa,qBAAU,WACN,IAAMC,OAAeX,EAAmBM,iBAAOK,SAEzCC,EAAgB,SAACC,GACfF,EAAQP,yBC9CQ,SAAC3C,GACzBA,GAAWA,EAAQqD,UACnBrD,EAAQqD,SAASC,SAAQ,SAACC,GAbH,IAACC,KAawBD,IAZtCC,EAAOC,cAAgBD,EAAOC,aAAanD,OAAS,GAC9DkD,EAAOC,aAAaH,SAAQ,SAACI,UAXD,SAAvBC,EAAwBrE,GAC7BD,EAAgBC,IAAgBA,EAAYe,SAC5Cf,EAAYe,SAASiD,SAAQ,SAACI,UAAMC,EAAqBD,MAClDjE,EAAsBH,KAC7BA,EAAYQ,UAAYgC,EAAkBxC,EAAYQ,WACtDR,EAAYgC,cAAgBQ,EAAkBxC,EAAYgC,gBAL9B,CAW4BoC,SAShC,CDgDCN,GAGrBL,EAAWK,IAkBXJ,EAEAG,EAAcH,kCAhBQE,EAAQV,gCAAxBoB,UACNA,EAAQC,OAAS,MACjBD,EAAQE,YAAOC,gBAGQ1H,MAAM6G,EAAQ/G,IAAKyH,mBAApCtH,wBACFA,EAASC,0BACaD,EAASE,uBAAzB0D,GACNiD,EAAcjD,MAEd,UAAUzD,wCAAwCH,EAASI,QALzDJ,SANgB,mCAiBR0G,KAKnB,CAACH,IAKAP,wBAACT,EAAqBmC,UAAShD,MAAOhB,GACjCA,GAAWA,EAAQW,aAAekC,EAAMxC,W,4CE7HxC4D,GAAc,SAAC,GAA+B,IAA9B7C,EAA6B,EAA7BA,KACzB,OACI,gBAAC8C,EAAA,EAAD,CAAMC,QAAQ,YACV,gBAACC,EAAA,EAAD,CAAYC,MAAM,iCAClB,gBAACC,EAAA,EAAD,KACI,gBAAC,IAAD,CAAWC,IAAKnD,EAAMoD,MAAM,cAAcC,UAAU,WAAWC,UAAW,EAAGC,iBAAiB,O,SCTjGC,GAAO,WAChB,IAAMC,EAAgBzC,IAGtB,OAAIyC,EAEI,2BACI,gBAACX,EAAA,EAAD,CAAMC,QAAQ,YACV,gBAACC,EAAA,EAAD,CAAYC,MAAM,qBAClB,gBAACC,EAAA,EAAD,KACI,gBAACQ,GAAA,EAAD,CAAYX,QAAQ,QAAQY,UAAU,OAAtC,QACUF,EAAczD,KAAK4D,KAE7B,gBAACF,GAAA,EAAD,CAAYX,QAAQ,QAAQY,UAAU,OAAtC,yBAC2BE,OAAOJ,EAAczD,KAAK8D,qBAErD,gBAACJ,GAAA,EAAD,CAAYX,QAAQ,QAAQY,UAAU,OAAtC,iBACmBE,OAAOJ,EAAczD,KAAK+D,eAE7C,gBAACL,GAAA,EAAD,CAAYX,QAAQ,QAAQY,UAAU,OAAtC,mBACqBK,KAAKC,UAAUR,EAAczD,KAAKkE,eAAeC,KAAI,SAAA7D,GAAC,OAAIA,EAAE8D,aAQ9F,kC,SCxBEC,GAAsB,SAACC,GAAD,OAAyBA,EAAMlI,QAKrDmI,GAAiBC,aAC1B,CAACH,KACD,SAAA/D,GAAC,OAAIA,EAAElE,UAcEqI,IARuBD,aAChC,CAACH,KACD,SAAA/D,GAAC,OAAIA,EAAElD,gBAMkB,SAACkH,GAAD,OAAyBA,EAAM3G,Y,UCzB/C+G,GAAc,WACvB,IAAMC,EAAQC,YAAYH,IAE1B,OAAIE,EAAM9H,QACE,gBAACgI,GAAA,EAAD,CAAOlI,SAAYgI,EAAMhI,UAAWgI,EAAM9H,SAE3C,kC,UC6BR,SAASiI,GAAMxI,GAClB,YAAuCqG,IAA/BrG,EAAcyI,aAGnB,SAASC,GAAkB1I,GAC9B,YAA6CqG,IAArCrG,EAA0B2I,O,sBC3CzBC,GAAeC,cAAW,SAAC/B,GAAD,MAAY,CAC/CgC,QAAS,CACLC,gBAAiBjC,EAAMkC,QAAQC,OAAOC,MACtCC,MAAO,sBACPC,UAAWtC,EAAMuC,QAAQ,GACzBC,SAAU,OALUT,CAOxBU,M,wCCCEC,GAAYC,aAAW,SAAC3C,GAAD,MAAY,CACrC4C,OAAQ,CACNC,OAAQ7C,EAAM8C,QAAQ,QAIfC,GAAiB,SAAC,GAAiC,IAA/B7J,EAA8B,EAA9BA,MACvB8J,EAAUN,KAD2C,EAEThJ,IAA1Cf,EAFmD,EAEnDA,SAAUF,EAFyC,EAEzCA,gBAAiBQ,EAFwB,EAExBA,WAE7BgK,ECwBkB,WACxB,IAAMzH,EAAUoC,IAChB,gBAAQoB,EAAgBvD,GACpB,OAAOD,GAAWA,EAAQW,aApCT,SACrBX,EACAwD,EACAvD,GAEA,IAAKD,IAAYA,EAAQqD,SAErB,OAAO,EAGX,IAAMqE,EAAe1H,EAAQqD,SAASsE,QAAO,SAACpE,UAAMA,EAAE1F,OAAS2F,KAAQ,GAEvE,IAAKkE,IAAiBA,EAAajE,aAE/B,OAAO,EAKX,IAFA,IAAMA,EAAeiE,EAAajE,aAEzBrD,EAAI,EAAGA,EAAIqD,EAAanD,OAAQF,IAErC,IADSL,EAAoBC,EAASyD,EAAarD,GAAIH,GAEnD,OAAO,EAIf,SA1BqB,CAoCkCD,EAASwD,EAAQvD,ID5BtD2H,EACCC,CAAUnK,EAAM8F,OAAQ9F,GAgB3C,OACI,2BACI,gBAAC4I,GAAD,CAAcwB,IAAKpK,EAAMI,GAAIiK,UAAU,MAAMC,OAAK,EAC9C3D,MACI,gBAAC,WAAD,KACI,gBAACS,GAAA,EAAD,CAAY+B,MAAM,WAAWnJ,EAAMG,MACnC,gBAACiH,GAAA,EAAD,CAAY+B,MAAM,aAAlB,kBAA0CnJ,EAAMuK,uBAAuB,GAAGtL,aAC1E,gBAACmI,GAAA,EAAD,CAAY+B,MAAM,aAAaT,GAAkB1I,IAAlB,cAAmCA,EAAMwK,OAAzC,YAAmDxK,EAAM2I,SACxF,gBAACvB,GAAA,EAAD,CAAY+B,MAAOY,EAAa,UAAY,SAAUA,EAAa,aAAe,oBAI1F,gBAACU,GAAA,EAAD,CACIhE,QAAQ,YACRiE,UAAWZ,EAAQJ,OACnBP,MAASY,EAAa,UAAY,YAClCY,UAAWnC,GAAMxI,GAAS,gBAAC,KAAD,MAAkB,gBAAC,KAAD,MAC5C4K,QAAS,kBA9BrBrL,GAAiB,QACbwK,EAEAhK,EAAWC,IAEXC,QAAQ4K,MAAR,oBAA2B7K,EAAMG,KAAjC,sBACAV,EAAS,CACLY,SAAUlB,EAAS2L,KACnBvK,QAAQ,2BAAD,OAA6BP,EAAMG,KAAnC,kCAAiEH,EAAM8F,OAAvE,WAwBF9F,EAAMG,SE9CrBqJ,GAAYC,aAAW,iBAAO,CAChCsB,UAAW,CACTC,QAAS,OACTC,cAAe,MACfC,eAAgB,qBAITC,GAAY,WACrB,IAAMrB,EAAUN,KACV1J,EAASwI,YAAYL,IACnBrI,EAAcY,IAAdZ,UAMR,GAJAgF,aAAgB,WACZhF,MACD,CAACA,IAEAE,GAAUA,EAAO8C,QAAU,EAAG,CAC9B,IAAMwI,EAAatL,EAAO+H,KAAI,SAAC7H,GAAD,OAAmB,gBAAC,GAAD,CAAgBoK,IAAKpK,EAAMI,GAAIJ,MAAOA,OAEvF,OACI,gBAACwG,EAAA,EAAD,CAAMC,QAAQ,YACV,gBAACC,EAAA,EAAD,CAAYC,MAAM,4BAClB,gBAACC,EAAA,EAAD,KACI,gBAACQ,GAAA,EAAD,CAAYX,QAAQ,YAAYY,UAAU,OAA1C,6CACA,uBAAKqD,UAAWZ,EAAQiB,WACnBK,GAEL,gBAAC,GAAD,QAMhB,OAAO,kC,UCnCEC,GAAO,WAChB,IAAM/I,EAAUoC,IAEhB,OACI,2BACI,gBAAC0C,GAAA,EAAD,CAAYX,QAAQ,KAAKY,UAAU,MAAnC,WACa/E,EAAQW,YAAYqI,SADjC,KAGA,gBAACC,GAAA,EAAD,CAAMC,WAAS,EAACvH,UAAU,SAASwH,QAAQ,SAASC,WAAW,WAC3D,gBAACH,GAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,gBAAC,GAAD,OAEJ,gBAACL,GAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,gBAAC,GAAD,OAEJ,gBAACL,GAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACX,gBAAC,GAAD,CAAalI,KAAMpB,QChB1BuJ,GAAYC,YAAe,CACpC9C,QAAS,CACLlB,KAAM,UAIR0B,GAAYC,aAAW,iBAAO,CAChCsC,KAAM,CACFf,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBQ,WAAY,eZEqB,SAAgCpJ,GACrE,GAAI6B,EACA,MAAM,IAAIpF,MAAM,kDAKpBoF,EAAuBS,wBAA4CtC,GYJvE0J,GAEe,kBACX,IAAMlC,EAAUN,KAEhB,OAEI,gBAAC,EAAD,CAAkBhE,QAAS,CAAE/G,IAAKJ,IAC9B,gBAAC4N,EAAA,EAAD,KACI,gBAAC,IAAD,CAAkBnF,MAAO+E,IACrB,gBAACK,EAAA,EAAD,CAAOxB,UAAWZ,EAAQiC,MACtB,gBAAC,GAAD,WCzBlBI,GAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DA8BR,SAASC,GAAgBC,GACrBC,UAAUC,cACLC,SAASH,GACTI,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBlM,QACb4L,UAAUC,cAAcQ,WAKxBnN,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAM/BmN,OAAM,SAAAxC,GACH5K,QAAQ4K,MAAM,4CAA6CA,MChEvEyC,SACI,gBAAC,IAAD,CAAUtF,MAAO1G,GACb,gBAACiM,GAAD,OAEJC,SAASC,eAAe,SDSb,WACX,GAA6C,kBAAmBd,UAAW,CAIvE,GADkB,IAAIe,IADVpP,IACmB+N,OAAOC,SAASrN,YACjC0O,SAAWtB,OAAOC,SAASqB,OAIrC,OAGJtB,OAAOuB,iBAAiB,QAAQ,WAC5B,IAAMlB,EAAK,UAAMpO,IAAN,sBAEP6N,GAwChB,SAAiCO,GAE7B/N,MAAM+N,GACDI,MAAK,SAAAlO,GAEF,IAAMiP,EAAcjP,EAASkP,QAAQC,IAAI,gBACjB,MAApBnP,EAASI,QAAmB6O,IAAsD,IAAvCA,EAAY1K,QAAQ,cAE/DwJ,UAAUC,cAAcoB,MAAMlB,MAAK,SAAAC,GAC/BA,EAAakB,aAAanB,MAAK,WAC3BT,OAAOC,SAAS4B,eAKxBzB,GAAgBC,MAGvBW,OAAM,WACHpN,QAAQC,IAAI,oEAzDRiO,CAAwBzB,GAGxBD,GAAgBC,OC3BhC0B,K","file":"static/js/main.11c008d2.chunk.js","sourcesContent":["import { Dispatch } from 'redux';\r\nimport { createActionCreator, useBoundActions } from 'roth.js';\r\nimport { AlertState, Severity } from './store';\r\nimport { callGetPlaces } from '../api/Api';\r\nimport { Place } from '../api/Contract';\r\n\r\n/* action type string enums */\r\n\r\n/**\r\n * Sample app action types\r\n */\r\nexport enum SampleActions {\r\n    SetPlaces = \"SetPlaces\",\r\n    SetCurrentPlace = \"SetCurrentPlace\",\r\n    SetAlert = \"SetAlert\",\r\n};\r\n\r\n/**\r\n * set places info action creator\r\n */\r\nconst setPlaces = createActionCreator<Place[]>(SampleActions.SetPlaces);\r\nexport type SetPlacesAction = ReturnType<typeof setPlaces>;\r\n\r\n\r\n/**\r\n * set current place action creator\r\n */\r\nconst setCurrentPlace = createActionCreator<number>(SampleActions.SetCurrentPlace);\r\nexport type SetCurrentPlaceAction = ReturnType<typeof setCurrentPlace>;\r\n\r\n/**\r\n * set error\r\n */\r\nconst setAlert = createActionCreator<AlertState>(SampleActions.SetAlert);\r\nexport type SetAlertAction = ReturnType<typeof setAlert>;\r\n\r\n\r\n/* ===============================thunk action creators============================ */\r\n\r\n/**\r\n * This is a thunk action creator used to get authorization context\r\n */\r\nconst getPlaces = () => {\r\n    return async (dispatch: Dispatch<any>) => {\r\n        const places = await callGetPlaces();\r\n        dispatch(setPlaces(places));\r\n    }\r\n};\r\n\r\n/**\r\n * This is a thunk action creator used to enter a place\r\n */\r\nconst enterPlace = (place: Place) => {\r\n    return (dispatch: Dispatch<any>) => {\r\n        console.log(`Entered \"${place.name}\" successfully.`);\r\n        dispatch(setCurrentPlace(place.id))\r\n        dispatch(setAlert({\r\n            severity: Severity.Info,\r\n            message: `You just walked into \"${place.name}\"`,\r\n        }));\r\n    }\r\n}\r\n\r\n\r\n/* action creators */\r\nconst actionCreators = {\r\n    getPlaces,\r\n    setAlert,\r\n    setCurrentPlace,\r\n    enterPlace,\r\n}\r\n\r\n/**\r\n * Custom hooks for auto bound action creators.\r\n * You can create one for each domain area to logically separate them.\r\n */\r\nexport const useAppBoundActions = () => useBoundActions(actionCreators);\r\n","import { Place } from './Contract';\r\n\r\nexport const policiesApi = `${process.env.PUBLIC_URL}/policies.json`;\r\nconst placesApi = `${process.env.PUBLIC_URL}/places.json`;\r\n\r\nconst callHttpGetAsync = async <T>(url: string):Promise<T> => {\r\n    const response = await fetch(url);\r\n\r\n    if (response.ok) {\r\n        return await response.json() as T;\r\n    } else {\r\n        // Throw error with HTTP status code\r\n        throw new Error(response.status.toString());\r\n    }\r\n}\r\n\r\n/* ====================== Api definition =============================*/\r\nexport const callGetPlaces = async () => {\r\n    return await callHttpGetAsync<Place[]>(placesApi);\r\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { createSlicedReducer } from 'roth.js';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport {\r\n    SampleActions,\r\n    SetPlacesAction,\r\n    SetCurrentPlaceAction,\r\n    SetAlertAction,\r\n} from './actions';\r\nimport { Place } from \"../api/Contract\";\r\n\r\n/* ====================== State definition =============================*/\r\nexport interface PlaceState {\r\n    places: Place[];\r\n    currentPlace: number;\r\n}\r\n\r\nexport enum Severity {\r\n    Info = 'info',\r\n    Warn = 'warning',\r\n    Error = 'error',\r\n}\r\n\r\nexport interface AlertState {\r\n    severity: Severity,\r\n    message: string,\r\n}\r\n\r\n/* ====================== Reducer definition =============================*/\r\n\r\n/**\r\n * place state reducer\r\n */\r\nconst placeStateReducer = createSlicedReducer({currentPlace: -1} as PlaceState, {\r\n    [SampleActions.SetPlaces]: [\r\n        (state: PlaceState, action: SetPlacesAction) => {\r\n            return {...state, places: action.payload, currentPlace: -1};\r\n        }\r\n    ],\r\n    [SampleActions.SetCurrentPlace]: [\r\n        (state: PlaceState, action: SetCurrentPlaceAction) => {\r\n            return {...state, currentPlace: action.payload};\r\n        }\r\n    ],\r\n});\r\n\r\n/**\r\n * Alert reducer\r\n */\r\nconst alertReducer = createSlicedReducer({severity: Severity.Info, message: 'Which place do you want to go?'} as AlertState, {\r\n    [SampleActions.SetAlert]: [\r\n        (state: AlertState, action: SetAlertAction) => {\r\n            return {...state, ...action.payload};\r\n        }\r\n    ],\r\n});\r\n\r\n/**\r\n * root reducer\r\n */\r\nconst rootReducer = combineReducers({\r\n    places: placeStateReducer,\r\n    alertInfo: alertReducer,\r\n});\r\n\r\n/**\r\n * store, created with thunk middleware and redux dev tools\r\n */\r\nexport const sampleStore = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\n/**\r\n * app store type\r\n */\r\nexport type ISampleStore = ReturnType<typeof rootReducer>;","/*\r\n * Requirement operator type - must match the server enum definition\r\n */\r\nexport enum OperatorType {\r\n    Invalid = -100,\r\n\r\n    // For asp.net core built in requirement serialization only\r\n    RequiresRole = -1,\r\n\r\n    // Direction agnostic requirements\r\n    Or = 1,\r\n    Equals = 2,\r\n\r\n    // Below operators can have direction applied\r\n    GreaterThan = 3,\r\n    GreaterThanOrEqualTo = 4,\r\n    Contains = 5\r\n}\r\n\r\n/*\r\n * Operator direction\r\n */\r\nexport enum Direction {\r\n    ContextToResource = 1,\r\n    ResourceToContext = 2\r\n}\r\n\r\n/*\r\n * AuthZyin client requirement definition. Serialized from server and will be used in client authorization.\r\n */\r\ninterface BaseRequirement {\r\n    operator: OperatorType;\r\n}\r\n\r\nexport interface OrRequiremet extends BaseRequirement {\r\n    children: Requirement[];\r\n}\r\n\r\nexport interface RequiresRoleRequiremet extends BaseRequirement {\r\n    allowedRoles: string[];\r\n}\r\n\r\nexport interface JsonPathRequiremet extends BaseRequirement {\r\n    dataJPath: string;\r\n    resourceJPath: string;\r\n    direction: Direction;\r\n}\r\n\r\nexport interface JsonPathConstantRequiremet extends JsonPathRequiremet {\r\n    constValue: unknown; // only available when we are comparing with a const value instead of real resource\r\n}\r\n\r\nexport type Requirement = OrRequiremet | RequiresRoleRequiremet | JsonPathRequiremet;\r\n\r\n/*\r\n * Requirement type guards for easy type manipulation.\r\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types\r\n */\r\nexport function IsOrRequirement(requirement: Requirement): requirement is OrRequiremet {\r\n    return requirement.operator === OperatorType.Or;\r\n}\r\n\r\nexport function IsRequiresRoleRequirement(requirement: Requirement): requirement is RequiresRoleRequiremet {\r\n    return requirement.operator === OperatorType.RequiresRole;\r\n}\r\n\r\nexport function IsJsonPathRequirement(requirement: Requirement): requirement is JsonPathRequiremet {\r\n    // White listing the operator types for json requirement\r\n    return (\r\n        (requirement.operator === OperatorType.Equals ||\r\n            requirement.operator === OperatorType.Contains ||\r\n            requirement.operator === OperatorType.GreaterThan ||\r\n            requirement.operator === OperatorType.GreaterThanOrEqualTo) &&\r\n        (requirement as JsonPathRequiremet).dataJPath !== undefined\r\n    );\r\n}\r\n\r\nexport function IsJsonPathConstantRequirement(requirement: Requirement): requirement is JsonPathConstantRequiremet {\r\n    return IsJsonPathRequirement(requirement) && (requirement as JsonPathConstantRequiremet).constValue !== undefined;\r\n}\r\n","import { JSONPath } from 'jsonpath-plus';\r\nimport { AuthZyinContext } from './AuthZyinContext';\r\nimport {\r\n    Requirement,\r\n    OrRequiremet,\r\n    RequiresRoleRequiremet,\r\n    IsOrRequirement,\r\n    IsRequiresRoleRequirement,\r\n    IsJsonPathConstantRequirement,\r\n    IsJsonPathRequirement,\r\n    JsonPathRequiremet,\r\n    OperatorType,\r\n    Direction\r\n} from './Requirements';\r\nimport { Resource, ConstantWrapperResource } from './Resource';\r\n\r\nconst evaluateRoleRequirement = <TData extends object>(\r\n    context: AuthZyinContext<TData>,\r\n    roleRequirement: RequiresRoleRequiremet\r\n) => {\r\n    const allowedRoles = roleRequirement.allowedRoles;\r\n    const userRoles = context.userContext.roles;\r\n\r\n    for (let i = 0; i < allowedRoles.length; i++) {\r\n        if (userRoles.indexOf(allowedRoles[i]) >= 0) {\r\n            // Allow if user has one of the allowed roles\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nconst evaluateOrRequirement = <TData extends object>(\r\n    context: AuthZyinContext<TData>,\r\n    orRequirement: OrRequiremet,\r\n    resource?: Resource\r\n) => {\r\n    for (let i = 0; i < orRequirement.children.length; i++) {\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        const result = evaluateRequirement(context, orRequirement.children[i], resource);\r\n        if (result) {\r\n            // Allow when one of the children requirements is met\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nconst compareTokens = (left: Array<object>, right: Array<object>, operator: OperatorType) => {\r\n    if (!left || !right || left.length <= 0 || right.length <= 0) {\r\n        return false;\r\n    }\r\n\r\n    switch (operator) {\r\n        case OperatorType.Equals:\r\n        case OperatorType.GreaterThan:\r\n        case OperatorType.GreaterThanOrEqualTo:\r\n            // We are expecting \"value\" comparisons for these cases\r\n            return (\r\n                left.length === 1 &&\r\n                left.length === right.length &&\r\n                ((operator === OperatorType.Equals && left[0] === right[0]) ||\r\n                    (operator === OperatorType.GreaterThan && left[0] > right[0]) ||\r\n                    (operator === OperatorType.GreaterThanOrEqualTo && left[0] >= right[0]))\r\n            );\r\n        case OperatorType.Contains:\r\n            // We are expecting right operand to be a \"value\"\r\n            return right.length === 1 && left.some((x: unknown) => x === right[0]);\r\n        default:\r\n            return false;\r\n    }\r\n};\r\n\r\nconst evaulateJsonPathRequirement = <TData extends object>(\r\n    context: AuthZyinContext<TData>,\r\n    jsonPathRequirement: JsonPathRequiremet,\r\n    resource?: Resource\r\n) => {\r\n    // Create dummy resource first if this is to compare with a constant.\r\n    if (IsJsonPathConstantRequirement(jsonPathRequirement)) {\r\n        resource = {\r\n            value: jsonPathRequirement.constValue\r\n        } as ConstantWrapperResource;\r\n    }\r\n\r\n    if (!resource) {\r\n        // resource is invalid or not provided.\r\n        return false;\r\n    }\r\n\r\n    const dataToken = JSONPath({\r\n        path: jsonPathRequirement.dataJPath,\r\n        json: context.data\r\n    });\r\n    const resourceToken = JSONPath({\r\n        path: jsonPathRequirement.resourceJPath,\r\n        json: resource\r\n    });\r\n\r\n    const left = jsonPathRequirement.direction === Direction.ContextToResource ? dataToken : resourceToken;\r\n    const right = jsonPathRequirement.direction === Direction.ContextToResource ? resourceToken : dataToken;\r\n\r\n    return compareTokens(left, right, jsonPathRequirement.operator);\r\n};\r\n\r\nexport const evaluateRequirement = <TData extends object>(\r\n    context: AuthZyinContext<TData>,\r\n    requirement: Requirement,\r\n    resource?: Resource\r\n) => {\r\n    let result = false;\r\n\r\n    // use type guards to evaluate the concrement requirement type\r\n    // More specific types to more generic types\r\n    if (IsOrRequirement(requirement)) {\r\n        result = evaluateOrRequirement(context, requirement, resource);\r\n    } else if (IsRequiresRoleRequirement(requirement)) {\r\n        result = evaluateRoleRequirement(context, requirement); //\r\n    } else if (IsJsonPathRequirement(requirement)) {\r\n        result = evaulateJsonPathRequirement(context, requirement, resource);\r\n    }\r\n\r\n    return result;\r\n};\r\n","import * as React from 'react';\r\nimport { useState, useEffect, PropsWithChildren } from 'react';\r\nimport { AuthZyinContext } from './AuthZyinContext';\r\nimport { camelCaseContext } from './PropNameCamelCase';\r\n\r\n/**\r\n * AuthZyin context api URL - this is setup by the AutZyin library automatically for you\r\n */\r\nconst contextApiUrl = '/authzyin/context';\r\n\r\n/**\r\n * Global reference of the authorization React context object\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nlet AuthZyinReactContext: React.Context<any>;\r\n\r\n/**\r\n * Function to initialize the authorization React context - similar as createStore from redux.\r\n * Call this in your app startup (e.g. index.tsx).\r\n * @param context - optional AuthZyin context object. Only pass the param when you want to initialize your context manually.\r\n */\r\nexport const initializeAuthZyinContext = <TData extends object = object>(context?: AuthZyinContext<TData>) => {\r\n    if (AuthZyinReactContext) {\r\n        throw new Error('AuthZyin React context is already initialized.');\r\n    }\r\n\r\n    // Create the React context wrapping around the context object\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    AuthZyinReactContext = React.createContext<AuthZyinContext<TData>>(context!);\r\n};\r\n\r\n/**\r\n * This is for testing only - to reset the global reference to the React context;\r\n */\r\nexport const resetAuthZyinContext = () => {\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    AuthZyinReactContext = undefined!;\r\n};\r\n\r\n/**\r\n * Hooks to read AuthZyinContext object from React context (e.g. to access basic user info or policies)\r\n */\r\nexport const useAuthZyinContext = <TData extends object = object>() => {\r\n    const reactContext = AuthZyinReactContext as React.Context<AuthZyinContext<TData>>;\r\n    if (!reactContext) {\r\n        throw new Error('AuthZyin React context is not setup. Call createAuthZyinContext first.');\r\n    }\r\n\r\n    return React.useContext(reactContext);\r\n};\r\n\r\n/**\r\n * Options interface for AuthZyinProvider\r\n */\r\nexport interface AuthZyinProviderOptions {\r\n    /**\r\n     * URL for the context api call. Defaults to contextApiUrl (/authzyin/context)\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Function to initialize requestInit for the context api fetch call.\r\n     * Use this to set authorization headers.\r\n     */\r\n    requestInitFn: () => Promise<RequestInit>;\r\n\r\n    /**\r\n     * Automatically convert property names in requirement JsonPath to camel case.\r\n     * If you are using Pascal case propery names in your C# authorization data definition and your asp.net core configuration\r\n     * converts them to Camel case, you'll want to set this to true.\r\n     * If you are serializing as Pascal case to the client, then set this to false.\r\n     * Defaults to true since this the most common case.\r\n     */\r\n    jsonPathPropToCamelCase: boolean;\r\n}\r\n\r\nconst defaultOptions: Partial<AuthZyinProviderOptions> = {\r\n    url: contextApiUrl,\r\n    requestInitFn: () => Promise.resolve({}),\r\n    jsonPathPropToCamelCase: true\r\n};\r\n\r\n/**\r\n * HOC component which sets the authorization React context - similar as Provider from redux\r\n * @param props - props to specify various options for the provider behavior. refer to AuthZyinProviderOptions.\r\n */\r\nexport const AuthZyinProvider = <TData extends object = object>(\r\n    props: PropsWithChildren<{ options?: Partial<AuthZyinProviderOptions> }>\r\n): JSX.Element => {\r\n    const [context, setContext] = useState({} as AuthZyinContext<TData>);\r\n\r\n    // useAuthZyinContext here will return the defaultValue set by initializeAuthZyinContext\r\n    const defaultAuthZyinContext = useAuthZyinContext<TData>();\r\n\r\n    useEffect(() => {\r\n        const options = { ...defaultOptions, ...props?.options } as AuthZyinProviderOptions;\r\n\r\n        const handleContext = (contextToSave: AuthZyinContext<TData>) => {\r\n            if (options.jsonPathPropToCamelCase) {\r\n                // Convert property names in JSON path to camel case\r\n                camelCaseContext(contextToSave);\r\n            }\r\n\r\n            setContext(contextToSave);\r\n        };\r\n\r\n        const fetcAndHandleContext = async (): Promise<void> => {\r\n            const request = await options.requestInitFn();\r\n            request.method = 'GET';\r\n            request.body = undefined;\r\n\r\n            // Call the context api from server to get the context data\r\n            const response = await fetch(options.url, request);\r\n            if (response.ok) {\r\n                const result = (await response.json()) as AuthZyinContext<TData>;\r\n                handleContext(result);\r\n            } else {\r\n                throw new Error(`AuthZyinContext loading error: ${response.status}`);\r\n            }\r\n        };\r\n\r\n        if (defaultAuthZyinContext) {\r\n            // If a default value is provided in initializeAuthZyinContext, use it\r\n            handleContext(defaultAuthZyinContext);\r\n        } else {\r\n            // No default value provided. Load it from server instead.\r\n            fetcAndHandleContext();\r\n        }\r\n    }, [props]);\r\n\r\n    // Return children components wrapped with proper React context.\r\n    // Children are only rendered when context is set correctly.\r\n    return (\r\n        <AuthZyinReactContext.Provider value={context}>\r\n            {context && context.userContext && props.children}\r\n        </AuthZyinReactContext.Provider>\r\n    );\r\n};\r\n","import { AuthZyinContext, ClientPolicy } from './AuthZyinContext';\r\nimport { Requirement, IsOrRequirement, IsJsonPathRequirement } from './Requirements';\r\n\r\n/**\r\n * Convert property names in a json path to camel case.\r\n * e.g., \"$.SomeData.Value\" to \"$.someData.value\"\r\n * @param path json path\r\n */\r\nexport const camelCaseJsonPath = (path: string) => {\r\n    if (!path) {\r\n        return path;\r\n    }\r\n\r\n    const pathLength = path.length;\r\n    let result = '';\r\n    let nextStart = 0;\r\n    while (nextStart < pathLength) {\r\n        let current = path.indexOf('.', nextStart);\r\n        current = current === -1 ? pathLength : current + 1;\r\n        // copy from the next start position till  this dot\r\n        result += path.substr(nextStart, current - nextStart);\r\n        if (current < pathLength && path[current] !== '.') {\r\n            // camel case next character after this dot (unless it is aslo dot)\r\n            result += path[current].toLowerCase();\r\n            current++;\r\n        }\r\n        nextStart = current;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const camelCaseRequirement = (requirement: Requirement) => {\r\n    if (IsOrRequirement(requirement) && requirement.children) {\r\n        requirement.children.forEach((r) => camelCaseRequirement(r));\r\n    } else if (IsJsonPathRequirement(requirement)) {\r\n        requirement.dataJPath = camelCaseJsonPath(requirement.dataJPath);\r\n        requirement.resourceJPath = camelCaseJsonPath(requirement.resourceJPath);\r\n    }\r\n};\r\n\r\nexport const camelCasePolicy = (policy: ClientPolicy) => {\r\n    if (policy && policy.requirements && policy.requirements.length > 0) {\r\n        policy.requirements.forEach((r) => camelCaseRequirement(r));\r\n    }\r\n};\r\n\r\n/**\r\n * Update all property names referenced by JSONPath in requirements\r\n * used by the context to be camel case.\r\n * @param context AuthzyinContext\r\n */\r\nexport const camelCaseContext = (context: AuthZyinContext<object>) => {\r\n    if (context && context.policies) {\r\n        context.policies.forEach((p) => camelCasePolicy(p));\r\n    }\r\n};\r\n","import * as React from 'react';\r\nimport { SampleAuthZyinContext } from '../api/Contract';\r\nimport { CardHeader, Card, CardContent } from '@material-ui/core';\r\nimport ReactJson from 'react-json-view';\r\n\r\ninterface IAuthContextProps {\r\n    data: SampleAuthZyinContext;\r\n}\r\n\r\nexport const AuthContext = ({data}: IAuthContextProps) => {\r\n    return (\r\n        <Card variant=\"outlined\">\r\n            <CardHeader title='Client authorization context' />\r\n            <CardContent>\r\n                <ReactJson src={data} theme='summerfruit' iconStyle='triangle' collapsed={2} enableClipboard={false}/>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}","import * as React from 'react';\r\nimport { Typography, Card, CardContent, CardHeader } from '@material-ui/core';\r\nimport { useAuthZyinContext } from 'authzyin.js';\r\nimport { AuthorizationData } from '../api/Contract';\r\n\r\nexport const User = () => {\r\n    const clientContext = useAuthZyinContext<AuthorizationData>();\r\n\r\n    // main rendering based on state\r\n    if (clientContext) {\r\n        return (\r\n            <div>\r\n                <Card variant=\"outlined\">\r\n                    <CardHeader title='User information' />\r\n                    <CardContent>\r\n                        <Typography variant=\"body1\" component=\"div\">\r\n                            Age: {clientContext.data.age}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" component=\"div\">\r\n                            Has driver's license: {String(clientContext.data.withDriversLicense)}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" component=\"div\">\r\n                            Has passport: {String(clientContext.data.withPassport)}\r\n                            </Typography>\r\n                        <Typography variant=\"body1\" component=\"div\">\r\n                            PaymentMethods: {JSON.stringify(clientContext.data.paymentMethods.map(x => x.type))}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <></>;\r\n};","import { createSelector } from 'reselect';\r\nimport { ISampleStore } from './store';\r\n\r\n// Use reselect.js for memoization and define all selectors outside of the function components.\r\n// If they are defined within the fuinction component it can potentially defeat the purpose of memoization,\r\n\r\n/**\r\n * places selector\r\n */\r\nexport const placesStateSelector = (store: ISampleStore) => store.places;\r\n\r\n/**\r\n * Places selector\r\n */\r\nexport const placesSelector = createSelector(\r\n    [placesStateSelector],\r\n    x => x.places\r\n);\r\n\r\n/**\r\n * Current place selector\r\n */\r\nexport const currentPlaceSelector = createSelector(\r\n    [placesStateSelector],\r\n    x => x.currentPlace\r\n);\r\n\r\n/**\r\n * Alert selector selector\r\n */\r\nexport const alertSelector = (store: ISampleStore) => store.alertInfo;","import * as React from 'react';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { useSelector } from 'react-redux';\r\nimport { alertSelector } from '../store/selectors';\r\n\r\nexport const AlertBanner = () => {\r\n    const alert = useSelector(alertSelector);\r\n\r\n    if (alert.message) {\r\n        return (<Alert severity = {alert.severity}>{alert.message}</Alert>);\r\n    } else {\r\n        return <></>;\r\n    }\r\n}","import { AuthZyinContext } from 'authzyin.js';\r\nimport { Resource } from 'authzyin.js';\r\n\r\n/* ====================== Api contract definition =============================*/\r\nexport interface PaymentMethod{\r\n    type: string;\r\n    credit: number;\r\n}\r\n\r\nexport interface AuthorizationData {\r\n    age: number;\r\n    withDriversLicense: boolean;\r\n    withPassport: boolean;\r\n    paymentMethods: PaymentMethod[];\r\n}\r\n\r\nexport type SampleAuthZyinContext = AuthZyinContext<AuthorizationData>;\r\n\r\n/* ====================== Resource definition =============================*/\r\nexport interface Place extends Resource\r\n{\r\n    id: number;\r\n    name: string;\r\n    acceptedPaymentMethods: string[];\r\n    policy: string;\r\n}\r\n\r\nexport interface Bar extends Place\r\n{\r\n    hasHappyHour: boolean;\r\n}\r\n\r\nexport interface AgeLimitedPlace extends Place\r\n{\r\n    minAge: number;\r\n    maxAge: number;\r\n}\r\n\r\n/* ==================== Contract type guards =======================*/\r\n\r\nexport function IsBar(place: Place): place is Bar {\r\n    return (place as Bar).hasHappyHour !== undefined;\r\n}\r\n\r\nexport function IsAgeLimitedPlace(place: Place): place is AgeLimitedPlace {\r\n    return (place as AgeLimitedPlace).maxAge !== undefined;\r\n}","import { Tooltip, withStyles } from '@material-ui/core';\r\n\r\nexport const LightTooltip = withStyles((theme) => ({\r\n    tooltip: {\r\n        backgroundColor: theme.palette.common.white,\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n        boxShadow: theme.shadows[1],\r\n        fontSize: 11,\r\n    },\r\n}))(Tooltip);\r\n\r\n","import * as React from 'react';\r\nimport { makeStyles, Typography, Button } from '@material-ui/core';\r\nimport { useAppBoundActions } from '../store/actions';\r\nimport { Place, IsAgeLimitedPlace, IsBar } from '../api/Contract';\r\nimport { Severity } from '../store/store';\r\nimport { LightTooltip } from './LightTooltip';\r\nimport LocalBarIcon from '@material-ui/icons/LocalBar';\r\nimport WeekendIcon from '@material-ui/icons/Weekend';\r\nimport { useAuthorize } from 'authzyin.js';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nexport const PlaceComponent = ({ place }: { place: Place }) => {\r\n    const classes = useStyles();\r\n    const { setAlert, setCurrentPlace, enterPlace } = useAppBoundActions();\r\n    const authorize = useAuthorize();\r\n    const authorized = authorize(place.policy, place);\r\n\r\n    const handlePlaceChange = () => {\r\n        setCurrentPlace(-1);\r\n        if (authorized) {\r\n            // invoke server api if client authorization succeeded or sneak in option is selected\r\n            enterPlace(place);\r\n        } else {\r\n            console.error(`Entering \"${place.name}\": not authorized`);\r\n            setAlert({\r\n                severity: Severity.Warn,\r\n                message: `Authorization failed - \"${place.name}\" forbidden by policy \"${place.policy}\"`,\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <LightTooltip key={place.id} placement='top' arrow\r\n                title={\r\n                    <React.Fragment>\r\n                        <Typography color=\"inherit\">{place.name}</Typography>\r\n                        <Typography color=\"secondary\">{`accepts ${place.acceptedPaymentMethods[0].toString()}`}</Typography>\r\n                        <Typography color=\"secondary\">{IsAgeLimitedPlace(place) && `Age:${place.minAge}-${place.maxAge}`}</Typography>\r\n                        <Typography color={authorized ? \"primary\" : \"error\"}>{authorized ? 'Authorized' : 'Not authorized'}</Typography>\r\n                    </React.Fragment>\r\n                }\r\n            >\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    color = {authorized ? \"primary\" : \"secondary\"}\r\n                    startIcon={IsBar(place) ? <LocalBarIcon/> : <WeekendIcon/>}\r\n                    onClick={() => handlePlaceChange()}\r\n                >\r\n                    {place.name}\r\n                </Button>\r\n            </LightTooltip>\r\n        </div>\r\n    );\r\n};","import { Resource } from './Resource';\r\nimport { AuthZyinContext } from './AuthZyinContext';\r\nimport { evaluateRequirement } from './RequirementEvaluator';\r\nimport { useAuthZyinContext } from './AuthZyinProvider';\r\n\r\n/**\r\n * authorize method which finds the policy and evaluates all requirements in it\r\n * @param context - AuthZyin context object containing user context, policy definitions and custom authorization data\r\n * @param policy - the policy to authorize against\r\n * @param resource - resource, optional depending  on the policy and requirement\r\n */\r\nexport const authorize = <TData extends object = object>(\r\n    context: AuthZyinContext<TData>,\r\n    policy: string,\r\n    resource?: Resource\r\n) => {\r\n    if (!context || !context.policies) {\r\n        // Incorrect context\r\n        return false;\r\n    }\r\n\r\n    const policyObject = context.policies.filter((p) => p.name === policy)[0];\r\n\r\n    if (!policyObject || !policyObject.requirements) {\r\n        // Cannot find policy\r\n        return false;\r\n    }\r\n\r\n    const requirements = policyObject.requirements;\r\n    let result = true;\r\n    for (let i = 0; i < requirements.length; i++) {\r\n        result = evaluateRequirement(context, requirements[i], resource);\r\n        if (!result) {\r\n            return false; // requirement failed, no need to continue\r\n        }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n/**\r\n * Authorization hooks, returns a convenient authorize method you can use in your component.\r\n * An always false func is returned when context is not initialized.\r\n */\r\nexport const useAuthorize = <TData extends object = object>() => {\r\n    const context = useAuthZyinContext<TData>();\r\n    return (policy: string, resource?: Resource) => {\r\n        return context && context.userContext && authorize(context, policy, resource);\r\n    };\r\n};\r\n","import * as React from 'react';\r\nimport { makeStyles, Card, CardHeader, CardContent, Typography } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { useAppBoundActions } from '../store/actions';\r\nimport { placesSelector } from '../store/selectors';\r\nimport { Place } from '../api/Contract';\r\nimport { AlertBanner } from './Alert';\r\nimport { PlaceComponent } from './PlaceComponent';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    placelist: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n    },\r\n}));\r\n\r\nexport const PlaceList = () => {\r\n    const classes = useStyles();\r\n    const places = useSelector(placesSelector);\r\n    const { getPlaces } = useAppBoundActions();\r\n\r\n    React.useEffect(() => {\r\n        getPlaces();\r\n    }, [getPlaces]);\r\n\r\n    if (places && places.length >= 0) {\r\n        const placesInfo = places.map((place: Place) => (<PlaceComponent key={place.id} place={place} />));\r\n    \r\n        return (\r\n            <Card variant=\"outlined\">\r\n                <CardHeader title='Local places nearby you' />\r\n                <CardContent>\r\n                    <Typography variant=\"subtitle1\" component=\"div\">Hover to see more details. Click to enter</Typography>\r\n                    <div className={classes.placelist}>\r\n                        {placesInfo}\r\n                    </div>\r\n                    <AlertBanner />\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    };\r\n\r\n    return <></>;\r\n};\r\n","import * as React from 'react';\r\nimport { AuthContext } from './AuthContext';\r\nimport { User } from './User';\r\nimport { PlaceList } from './PlaceList';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { useAuthZyinContext } from 'authzyin.js';\r\nimport { AuthorizationData } from '../api/Contract';\r\n\r\nexport const Home = () => {\r\n    const context = useAuthZyinContext<AuthorizationData>();\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h2\" component=\"h2\">\r\n                Welcome {context.userContext.userName}!\r\n            </Typography>\r\n            <Grid container direction='column' justify='center' alignItems='stretch'>\r\n                <Grid item xl={12}>\r\n                    <PlaceList />\r\n                </Grid>\r\n                <Grid item xl={12}>\r\n                    <User />\r\n                </Grid>\r\n                <Grid item xl={12}>\r\n                    <AuthContext data={context} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport { createMuiTheme, MuiThemeProvider, makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, Container } from '@material-ui/core';\r\nimport { initializeAuthZyinContext, AuthZyinProvider } from 'authzyin.js';\r\nimport { Home } from './components/Home';\r\nimport { policiesApi } from './api/Api';\r\n\r\n// dark theme\r\nexport const darkTheme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    }\r\n}));\r\n\r\n// Initialize authzyin context globally\r\ninitializeAuthZyinContext();\r\n\r\nexport default () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        // Sign in succeeded, render main content wrapped with AuthZyinProvider\r\n        <AuthZyinProvider options={{ url: policiesApi }}>\r\n            <Container>\r\n                <MuiThemeProvider theme={darkTheme}>\r\n                    <Paper className={classes.root}>\r\n                        <Home />\r\n                    </Paper>\r\n                </MuiThemeProvider>\r\n            </Container>\r\n        </AuthZyinProvider>\r\n    );\r\n};\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const url = process.env.PUBLIC_URL as string;\r\n        const publicUrl = new URL(url, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing as ServiceWorker;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport {sampleStore} from './store/store';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={sampleStore}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}