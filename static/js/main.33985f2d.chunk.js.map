{"version":3,"sources":["store/actions.ts","api/Api.ts","store/store.ts","../../src/Requirements.ts","../../src/RequirementEvaluator.ts","../../src/AuthZyinProvider.tsx","../../src/PropNameCamelCase.ts","../../src/Authorize.tsx","components/AuthContext.tsx","components/User.tsx","store/selectors.ts","components/Alert.tsx","components/LightTooltip.tsx","components/PlaceComponent.tsx","api/Contract.ts","components/PlaceList.tsx","components/Home.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["SampleActions","policiesApi","process","placesApi","callHttpGetAsync","url","a","fetch","response","ok","json","Error","status","toString","callGetPlaces","Severity","setPlaces","createActionCreator","SetPlaces","setCurrentPlace","SetCurrentPlace","setAlert","SetAlert","actionCreators","getPlaces","dispatch","places","enterPlace","place","console","log","name","id","severity","Info","message","useAppBoundActions","useBoundActions","OperatorType","Direction","placeStateReducer","createSlicedReducer","currentPlace","state","action","payload","defaultAlertState","alertReducer","rootReducer","combineReducers","alertInfo","sampleStore","createStore","composeWithDevTools","applyMiddleware","thunk","IsOrRequirement","requirement","operator","Or","IsJsonPathRequirement","Equals","Contains","GreaterThan","GreaterThanOrEqualTo","dataJPath","evaluateRequirement","context","resource","result","orRequirement","i","children","length","RequiresRole","roleRequirement","allowedRoles","userRoles","userContext","roles","indexOf","jsonPathRequirement","constValue","value","dataToken","JSONPath","path","data","resourceToken","resourceJPath","left","right","some","x","direction","ContextToResource","AuthZyinReactContext","camelCaseJsonPath","pathLength","nextStart","current","substr","toLowerCase","useAuthZyinContext","reactContext","React","defaultOptions","requestInitFn","Promise","resolve","jsonPathPropToCamelCase","AuthZyinProvider","props","useState","setContext","defaultContext","useEffect","options","handleContext","contextToSave","policies","forEach","p","policy","requirements","r","camelCaseRequirement","request","method","body","undefined","Provider","useAuthorize","policyObject","filter","Authorize","authorize","authorized","AuthContext","Card","variant","CardHeader","title","CardContent","src","theme","iconStyle","collapsed","enableClipboard","User","clientContext","Typography","component","age","String","withDriversLicense","withPassport","JSON","stringify","paymentMethods","map","type","placesStateSelector","store","placesSelector","createSelector","alertSelector","AlertBanner","alert","useSelector","Alert","LightTooltip","withStyles","tooltip","backgroundColor","palette","common","white","color","boxShadow","shadows","fontSize","Tooltip","useStyles","makeStyles","button","margin","spacing","toolTipTitle","acceptedPaymentMethods","maxAge","IsAgeLimitedPlace","minAge","getIcon","hasHappyHour","IsBar","PlaceWihtUseAuthorizeHook","key","placement","arrow","Button","className","buttonClass","startIcon","onClick","onEnterPlace","PlaceWithAuthorizeComponent","PlaceComponent","classes","tryEnterPlace","error","Warn","placelist","display","flexDirection","justifyContent","PlaceList","placesInfo","Home","userName","Grid","container","justify","alignItems","item","xl","darkTheme","createMuiTheme","root","initializeAuthZyinContext","Container","Paper","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","App","document","getElementById","URL","origin","addEventListener","contentType","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.33985f2d.chunk.js","sourcesContent":["import { Dispatch } from 'redux';\nimport { createActionCreator, useBoundActions } from 'roth.js';\nimport { AlertState, Severity } from './store';\nimport { callGetPlaces } from '../api/Api';\nimport { Place } from '../api/Contract';\n\n/* action type string enums */\n\n/**\n * Sample app action types\n */\nexport enum SampleActions {\n    SetPlaces = \"SetPlaces\",\n    SetCurrentPlace = \"SetCurrentPlace\",\n    SetAlert = \"SetAlert\",\n};\n\n/**\n * set places info action creator\n */\nconst setPlaces = createActionCreator<Place[]>(SampleActions.SetPlaces);\nexport type SetPlacesAction = ReturnType<typeof setPlaces>;\n\n\n/**\n * set current place action creator\n */\nconst setCurrentPlace = createActionCreator<number>(SampleActions.SetCurrentPlace);\nexport type SetCurrentPlaceAction = ReturnType<typeof setCurrentPlace>;\n\n/**\n * set error\n */\nconst setAlert = createActionCreator<AlertState>(SampleActions.SetAlert);\nexport type SetAlertAction = ReturnType<typeof setAlert>;\n\n\n/* ===============================thunk action creators============================ */\n\n/**\n * This is a thunk action creator used to get authorization context\n */\nconst getPlaces = () => {\n    return async (dispatch: Dispatch<any>) => {\n        const places = await callGetPlaces();\n        dispatch(setPlaces(places));\n    }\n};\n\n/**\n * This is a thunk action creator used to enter a place\n */\nconst enterPlace = (place: Place) => {\n    return (dispatch: Dispatch<any>) => {\n        console.log(`Entered \"${place.name}\" successfully.`);\n        dispatch(setCurrentPlace(place.id))\n        dispatch(setAlert({\n            severity: Severity.Info,\n            message: `You just walked into \"${place.name}\"`,\n        }));\n    }\n}\n\n\n/* action creators */\nconst actionCreators = {\n    getPlaces,\n    setAlert,\n    setCurrentPlace,\n    enterPlace,\n}\n\n/**\n * Custom hooks for auto bound action creators.\n * You can create one for each domain area to logically separate them.\n */\nexport const useAppBoundActions = () => useBoundActions(actionCreators);\n","import { Place } from './Contract';\n\nexport const policiesApi = `${process.env.PUBLIC_URL}/policies.json`;\nconst placesApi = `${process.env.PUBLIC_URL}/places.json`;\n\nconst callHttpGetAsync = async <T>(url: string):Promise<T> => {\n    const response = await fetch(url);\n\n    if (response.ok) {\n        return await response.json() as T;\n    } else {\n        // Throw error with HTTP status code\n        throw new Error(response.status.toString());\n    }\n}\n\n/* ====================== Api definition =============================*/\nexport const callGetPlaces = async () => {\n    return await callHttpGetAsync<Place[]>(placesApi);\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createSlicedReducer } from 'roth.js';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport {\n    SampleActions,\n    SetPlacesAction,\n    SetCurrentPlaceAction,\n    SetAlertAction,\n} from './actions';\nimport { Place } from \"../api/Contract\";\n\n/* ====================== State definition =============================*/\nexport interface PlaceState {\n    places: Place[];\n    currentPlace: number;\n}\n\nexport enum Severity {\n    Info = 'info',\n    Warn = 'warning',\n    Error = 'error',\n}\n\nexport interface AlertState {\n    severity: Severity,\n    message: string,\n}\n\n/* ====================== Reducer definition =============================*/\n/**\n * place state reducer\n */\nconst defaultPlaceState: PlaceState = {\n    places: [],\n    currentPlace: -1\n};\nconst placeStateReducer = createSlicedReducer(defaultPlaceState, {\n    [SampleActions.SetPlaces]: [\n        (state: PlaceState, action: SetPlacesAction) => {\n            return {...state, places: action.payload, currentPlace: -1};\n        }\n    ],\n    [SampleActions.SetCurrentPlace]: [\n        (state: PlaceState, action: SetCurrentPlaceAction) => {\n            return {...state, currentPlace: action.payload};\n        }\n    ],\n});\n\n/**\n * Alert reducer\n */\nconst defaultAlertState: AlertState = {\n    severity: Severity.Info,\n    message: 'Which place do you want to go?'\n};\nconst alertReducer = createSlicedReducer(defaultAlertState, {\n    [SampleActions.SetAlert]: [\n        (state: AlertState, action: SetAlertAction) => {\n            return {...state, ...action.payload};\n        }\n    ],\n});\n\n/**\n * root reducer\n */\nconst rootReducer = combineReducers({\n    places: placeStateReducer,\n    alertInfo: alertReducer,\n});\n\n/**\n * store, created with thunk middleware and redux dev tools\n */\nexport const sampleStore = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\n/**\n * app store type\n */\nexport type ISampleStore = ReturnType<typeof rootReducer>;","/*\n * Requirement operator type - must match the server enum definition\n */\nexport enum OperatorType {\n    Invalid = -100,\n\n    // For asp.net core built in requirement serialization only\n    RequiresRole = -1,\n\n    // Direction agnostic requirements\n    Or = 1,\n    Equals = 2,\n\n    // Below operators can have direction applied\n    GreaterThan = 3,\n    GreaterThanOrEqualTo = 4,\n    Contains = 5\n}\n\n/*\n * Operator direction\n */\nexport enum Direction {\n    ContextToResource = 1,\n    ResourceToContext = 2\n}\n\n/*\n * AuthZyin client requirement definition. Serialized from server and will be used in client authorization.\n */\ninterface BaseRequirement {\n    operator: OperatorType;\n}\n\nexport interface OrRequiremet extends BaseRequirement {\n    children: Requirement[];\n}\n\nexport interface RequiresRoleRequiremet extends BaseRequirement {\n    allowedRoles: string[];\n}\n\nexport interface JsonPathRequiremet extends BaseRequirement {\n    dataJPath: string;\n    resourceJPath: string;\n    direction: Direction;\n}\n\nexport interface JsonPathConstantRequiremet extends JsonPathRequiremet {\n    constValue: unknown; // only available when we are comparing with a const value instead of real resource\n}\n\nexport type Requirement = OrRequiremet | RequiresRoleRequiremet | JsonPathRequiremet;\n\n/*\n * Requirement type guards for easy type manipulation.\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types\n */\nexport function IsOrRequirement(requirement: Requirement): requirement is OrRequiremet {\n    return requirement.operator === OperatorType.Or;\n}\n\nexport function IsRequiresRoleRequirement(requirement: Requirement): requirement is RequiresRoleRequiremet {\n    return requirement.operator === OperatorType.RequiresRole;\n}\n\nexport function IsJsonPathRequirement(requirement: Requirement): requirement is JsonPathRequiremet {\n    // White listing the operator types for json requirement\n    return (\n        (requirement.operator === OperatorType.Equals ||\n            requirement.operator === OperatorType.Contains ||\n            requirement.operator === OperatorType.GreaterThan ||\n            requirement.operator === OperatorType.GreaterThanOrEqualTo) &&\n        (requirement as JsonPathRequiremet).dataJPath !== undefined\n    );\n}\n\nexport function IsJsonPathConstantRequirement(requirement: Requirement): requirement is JsonPathConstantRequiremet {\n    return IsJsonPathRequirement(requirement) && (requirement as JsonPathConstantRequiremet).constValue !== undefined;\n}\n","import { JSONPath } from 'jsonpath-plus';\nimport { AuthZyinContext } from './AuthZyinContext';\nimport {\n    Requirement,\n    OrRequiremet,\n    RequiresRoleRequiremet,\n    IsOrRequirement,\n    IsRequiresRoleRequirement,\n    IsJsonPathConstantRequirement,\n    IsJsonPathRequirement,\n    JsonPathRequiremet,\n    OperatorType,\n    Direction\n} from './Requirements';\nimport { Resource, ConstantWrapperResource } from './Resource';\n\nconst evaluateRoleRequirement = <TData extends object>(\n    context: AuthZyinContext<TData>,\n    roleRequirement: RequiresRoleRequiremet\n) => {\n    const allowedRoles = roleRequirement.allowedRoles;\n    const userRoles = context.userContext.roles;\n\n    for (let i = 0; i < allowedRoles.length; i++) {\n        if (userRoles.indexOf(allowedRoles[i]) >= 0) {\n            // Allow if user has one of the allowed roles\n            return true;\n        }\n    }\n\n    return false;\n};\n\nconst evaluateOrRequirement = <TData extends object>(\n    context: AuthZyinContext<TData>,\n    orRequirement: OrRequiremet,\n    resource?: Resource\n) => {\n    for (let i = 0; i < orRequirement.children.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const result = evaluateRequirement(context, orRequirement.children[i], resource);\n        if (result) {\n            // Allow when one of the children requirements is met\n            return true;\n        }\n    }\n\n    return false;\n};\n\nconst compareTokens = (left: Array<object>, right: Array<object>, operator: OperatorType) => {\n    if (!left || !right || left.length <= 0 || right.length <= 0) {\n        return false;\n    }\n\n    switch (operator) {\n        case OperatorType.Equals:\n        case OperatorType.GreaterThan:\n        case OperatorType.GreaterThanOrEqualTo:\n            // We are expecting \"value\" comparisons for these cases\n            return (\n                left.length === 1 &&\n                left.length === right.length &&\n                ((operator === OperatorType.Equals && left[0] === right[0]) ||\n                    (operator === OperatorType.GreaterThan && left[0] > right[0]) ||\n                    (operator === OperatorType.GreaterThanOrEqualTo && left[0] >= right[0]))\n            );\n        case OperatorType.Contains:\n            // We are expecting right operand to be a \"value\"\n            return right.length === 1 && left.some((x: unknown) => x === right[0]);\n        default:\n            return false;\n    }\n};\n\nconst evaulateJsonPathRequirement = <TData extends object>(\n    context: AuthZyinContext<TData>,\n    jsonPathRequirement: JsonPathRequiremet,\n    resource?: Resource\n) => {\n    // Create dummy resource first if this is to compare with a constant.\n    if (IsJsonPathConstantRequirement(jsonPathRequirement)) {\n        resource = {\n            value: jsonPathRequirement.constValue\n        } as ConstantWrapperResource;\n    }\n\n    if (!resource) {\n        // resource is invalid or not provided.\n        return false;\n    }\n\n    const dataToken = JSONPath({\n        path: jsonPathRequirement.dataJPath,\n        json: context.data\n    });\n    const resourceToken = JSONPath({\n        path: jsonPathRequirement.resourceJPath,\n        json: resource\n    });\n\n    const left = jsonPathRequirement.direction === Direction.ContextToResource ? dataToken : resourceToken;\n    const right = jsonPathRequirement.direction === Direction.ContextToResource ? resourceToken : dataToken;\n\n    return compareTokens(left, right, jsonPathRequirement.operator);\n};\n\nexport const evaluateRequirement = <TData extends object>(\n    context: AuthZyinContext<TData>,\n    requirement: Requirement,\n    resource?: Resource\n) => {\n    let result = false;\n\n    // use type guards to evaluate the concrement requirement type\n    // More specific types to more generic types\n    if (IsOrRequirement(requirement)) {\n        result = evaluateOrRequirement(context, requirement, resource);\n    } else if (IsRequiresRoleRequirement(requirement)) {\n        result = evaluateRoleRequirement(context, requirement); //\n    } else if (IsJsonPathRequirement(requirement)) {\n        result = evaulateJsonPathRequirement(context, requirement, resource);\n    }\n\n    return result;\n};\n","import * as React from 'react';\nimport { useState, useEffect, PropsWithChildren } from 'react';\nimport { AuthZyinContext } from './AuthZyinContext';\nimport { camelCaseContext } from './PropNameCamelCase';\n\n/**\n * AuthZyin context api URL - this is setup by the AutZyin library automatically for you\n */\nconst contextApiUrl = '/authzyin/context';\n\n/**\n * Global reference of the authorization React context object\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet AuthZyinReactContext: React.Context<any>;\n\n/**\n * Function to initialize the authorization React context - similar as createStore from redux.\n * Call this in your app startup (e.g. index.tsx).\n * @param context - optional AuthZyin context object. Only pass the param when you want to initialize your context manually.\n */\nexport const initializeAuthZyinContext = <TData extends object = object>(context?: AuthZyinContext<TData>) => {\n    if (AuthZyinReactContext) {\n        throw new Error('AuthZyin React context is already initialized.');\n    }\n\n    // Create the React context wrapping around the context object\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    AuthZyinReactContext = React.createContext<AuthZyinContext<TData>>(context!);\n};\n\n/**\n * This is for testing only - to reset the global reference to the React context;\n */\nexport const resetAuthZyinContext = () => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    AuthZyinReactContext = undefined!;\n};\n\n/**\n * Hooks to read AuthZyinContext object from React context (e.g. to access basic user info or policies)\n */\nexport const useAuthZyinContext = <TData extends object = object>() => {\n    const reactContext = AuthZyinReactContext as React.Context<AuthZyinContext<TData>>;\n    if (!reactContext) {\n        throw new Error('AuthZyin React context is not setup. Call createAuthZyinContext first.');\n    }\n\n    return React.useContext(reactContext);\n};\n\n/**\n * Options interface for AuthZyinProvider\n */\nexport interface AuthZyinProviderOptions {\n    /**\n     * URL for the context api call. Defaults to contextApiUrl (/authzyin/context)\n     */\n    url: string;\n\n    /**\n     * Function to initialize requestInit for the context api fetch call.\n     * Use this to set authorization headers.\n     */\n    requestInitFn: () => Promise<RequestInit>;\n\n    /**\n     * Automatically convert property names in requirement JsonPath to camel case.\n     * If you are using Pascal case propery names in your C# authorization data definition and your asp.net core configuration\n     * converts them to Camel case, you'll want to set this to true.\n     * If you are serializing as Pascal case to the client, then set this to false.\n     * Defaults to true since this the most common case.\n     */\n    jsonPathPropToCamelCase: boolean;\n}\n\nconst defaultOptions: AuthZyinProviderOptions = {\n    url: contextApiUrl,\n    requestInitFn: () => Promise.resolve({}),\n    jsonPathPropToCamelCase: true\n};\n\n/**\n * HOC component which sets the authorization React context - similar as Provider from redux\n * @param props - props to specify various options for the provider behavior. refer to AuthZyinProviderOptions.\n */\nexport const AuthZyinProvider = <TData extends object = object>(\n    props: PropsWithChildren<{ options?: Partial<AuthZyinProviderOptions> }>\n): JSX.Element => {\n    const [context, setContext] = useState<AuthZyinContext<TData>>();\n\n    // useAuthZyinContext here will return the defaultValue set by initializeAuthZyinContext\n    const defaultContext = useAuthZyinContext<TData>();\n\n    useEffect(() => {\n        const options: AuthZyinProviderOptions = { ...defaultOptions, ...props?.options };\n\n        const handleContext = (contextToSave: AuthZyinContext<TData>) => {\n            if (options.jsonPathPropToCamelCase) {\n                // Convert property names in JSON path to camel case\n                camelCaseContext(contextToSave);\n            }\n\n            setContext(contextToSave);\n        };\n\n        const fetcAndHandleContext = async (): Promise<void> => {\n            const request = await options.requestInitFn();\n            request.method = 'GET';\n            request.body = undefined;\n\n            // Call the context api from server to get the context data\n            const response = await fetch(options.url, request);\n            if (response.ok) {\n                const result = (await response.json()) as AuthZyinContext<TData>;\n                handleContext(result);\n            } else {\n                throw new Error(`AuthZyinContext loading error: ${response.status}`);\n            }\n        };\n\n        if (defaultContext) {\n            // If a default value is provided in initializeAuthZyinContext, use it\n            handleContext(defaultContext);\n        } else {\n            // No default value provided. Load it from server instead.\n            fetcAndHandleContext();\n        }\n    }, [props]);\n\n    // Return children components wrapped with proper React context.\n    // Children are only rendered when context is set correctly.\n    return (\n        <AuthZyinReactContext.Provider value={context}>\n            {context && context.userContext && props.children}\n        </AuthZyinReactContext.Provider>\n    );\n};\n","import { AuthZyinContext, ClientPolicy } from './AuthZyinContext';\nimport { Requirement, IsOrRequirement, IsJsonPathRequirement } from './Requirements';\n\n/**\n * Convert property names in a json path to camel case.\n * e.g., \"$.SomeData.Value\" to \"$.someData.value\"\n * @param path json path\n */\nexport const camelCaseJsonPath = (path: string) => {\n    if (!path) {\n        return path;\n    }\n\n    const pathLength = path.length;\n    let result = '';\n    let nextStart = 0;\n    while (nextStart < pathLength) {\n        let current = path.indexOf('.', nextStart);\n        current = current === -1 ? pathLength : current + 1;\n        // copy from the next start position till  this dot\n        result += path.substr(nextStart, current - nextStart);\n        if (current < pathLength && path[current] !== '.') {\n            // camel case next character after this dot (unless it is aslo dot)\n            result += path[current].toLowerCase();\n            current++;\n        }\n        nextStart = current;\n    }\n\n    return result;\n};\n\nexport const camelCaseRequirement = (requirement: Requirement) => {\n    if (IsOrRequirement(requirement) && requirement.children) {\n        requirement.children.forEach((r) => camelCaseRequirement(r));\n    } else if (IsJsonPathRequirement(requirement)) {\n        requirement.dataJPath = camelCaseJsonPath(requirement.dataJPath);\n        requirement.resourceJPath = camelCaseJsonPath(requirement.resourceJPath);\n    }\n};\n\nexport const camelCasePolicy = (policy: ClientPolicy) => {\n    if (policy && policy.requirements && policy.requirements.length > 0) {\n        policy.requirements.forEach((r) => camelCaseRequirement(r));\n    }\n};\n\n/**\n * Update all property names referenced by JSONPath in requirements\n * used by the context to be camel case.\n * @param context AuthzyinContext\n */\nexport const camelCaseContext = (context: AuthZyinContext<object>) => {\n    if (context && context.policies) {\n        context.policies.forEach((p) => camelCasePolicy(p));\n    }\n};\n","import * as React from 'react';\nimport { Resource } from './Resource';\nimport { AuthZyinContext } from './AuthZyinContext';\nimport { evaluateRequirement } from './RequirementEvaluator';\nimport { useAuthZyinContext } from './AuthZyinProvider';\n\n/**\n * authorize method which finds the policy and evaluates all requirements in it\n * @param context - AuthZyin context object containing user context, policy definitions and custom authorization data\n * @param policy - the policy to authorize against\n * @param resource - resource, optional depending  on the policy and requirement\n */\nexport const authorizeFunc = (context: AuthZyinContext<object>, policy: string, resource?: Resource) => {\n    if (!context || !context.policies) {\n        // Incorrect context\n        return false;\n    }\n\n    const policyObject = context.policies.filter((p) => p.name === policy)[0];\n\n    if (!policyObject || !policyObject.requirements) {\n        // Cannot find policy\n        return false;\n    }\n\n    const requirements = policyObject.requirements;\n    let result = true;\n    for (let i = 0; i < requirements.length; i++) {\n        result = evaluateRequirement(context, requirements[i], resource);\n        if (!result) {\n            return false; // requirement failed, no need to continue\n        }\n    }\n\n    return true;\n};\n\n/**\n * Authorization hooks, returns a convenient authorize method you can use in your component.\n * An always false func is returned when context is not initialized.\n */\nexport const useAuthorize = () => {\n    const context = useAuthZyinContext<object>();\n    return (policy: string, resource?: Resource) => {\n        return context && context.userContext && authorizeFunc(context, policy, resource);\n    };\n};\n\n// Use React render props (with children as the render props function)\ninterface AuthorizeProps {\n    policy: string;\n    resource?: Resource;\n    children: (authorized: boolean) => JSX.Element;\n}\n\n/**\n * Authorize component which can be used to authorize without hooks.\n */\nexport const Authorize = (props: AuthorizeProps) => {\n    const authorize = useAuthorize();\n\n    if (!props?.children) {\n        return <></>;\n    }\n\n    const authorized = authorize(props.policy, props.resource);\n\n    // Render children using render props and passing in the authorization result\n    return props.children(authorized);\n};\n","import * as React from 'react';\nimport { SampleAuthZyinContext } from '../api/Contract';\nimport { CardHeader, Card, CardContent } from '@material-ui/core';\nimport ReactJson from 'react-json-view';\n\ninterface IAuthContextProps {\n    data: SampleAuthZyinContext;\n}\n\nexport const AuthContext = ({data}: IAuthContextProps) => {\n    return (\n        <Card variant=\"outlined\">\n            <CardHeader title='Client authorization context' />\n            <CardContent>\n                <ReactJson src={data} theme='summerfruit' iconStyle='triangle' collapsed={2} enableClipboard={false}/>\n            </CardContent>\n        </Card>\n    );\n}","import * as React from 'react';\nimport { Typography, Card, CardContent, CardHeader } from '@material-ui/core';\nimport { useAuthZyinContext } from 'authzyin.js';\nimport { AuthorizationData } from '../api/Contract';\n\nexport const User = () => {\n    const clientContext = useAuthZyinContext<AuthorizationData>();\n\n    // main rendering based on state\n    if (clientContext) {\n        return (\n            <div>\n                <Card variant=\"outlined\">\n                    <CardHeader title='User information' />\n                    <CardContent>\n                        <Typography variant=\"body1\" component=\"div\">\n                            Age: {clientContext.data.age}\n                        </Typography>\n                        <Typography variant=\"body1\" component=\"div\">\n                            Has driver's license: {String(clientContext.data.withDriversLicense)}\n                        </Typography>\n                        <Typography variant=\"body1\" component=\"div\">\n                            Has passport: {String(clientContext.data.withPassport)}\n                            </Typography>\n                        <Typography variant=\"body1\" component=\"div\">\n                            PaymentMethods: {JSON.stringify(clientContext.data.paymentMethods.map(x => x.type))}\n                        </Typography>\n                    </CardContent>\n                </Card>\n            </div>\n        );\n    }\n\n    return <></>;\n};","import { createSelector } from 'reselect';\nimport { ISampleStore } from './store';\n\n// Use reselect.js for memoization and define all selectors outside of the function components.\n// If they are defined within the fuinction component it can potentially defeat the purpose of memoization,\n\n/**\n * places selector\n */\nexport const placesStateSelector = (store: ISampleStore) => store.places;\n\n/**\n * Places selector\n */\nexport const placesSelector = createSelector(\n    [placesStateSelector],\n    x => x.places\n);\n\n/**\n * Current place selector\n */\nexport const currentPlaceSelector = createSelector(\n    [placesStateSelector],\n    x => x.currentPlace\n);\n\n/**\n * Alert selector selector\n */\nexport const alertSelector = (store: ISampleStore) => store.alertInfo;","import * as React from 'react';\nimport { Alert } from '@material-ui/lab';\nimport { useSelector } from 'react-redux';\nimport { alertSelector } from '../store/selectors';\n\nexport const AlertBanner = () => {\n    const alert = useSelector(alertSelector);\n\n    if (alert.message) {\n        return (<Alert severity = {alert.severity}>{alert.message}</Alert>);\n    } else {\n        return <></>;\n    }\n}","import { Tooltip, withStyles } from '@material-ui/core';\n\nexport const LightTooltip = withStyles((theme) => ({\n    tooltip: {\n        backgroundColor: theme.palette.common.white,\n        color: 'rgba(0, 0, 0, 0.87)',\n        boxShadow: theme.shadows[1],\n        fontSize: 11,\n    },\n}))(Tooltip);\n\n","import * as React from 'react';\nimport { makeStyles, Typography, Button } from '@material-ui/core';\nimport { useAppBoundActions } from '../store/actions';\nimport { Place, IsAgeLimitedPlace, IsBar } from '../api/Contract';\nimport { Severity } from '../store/store';\nimport { LightTooltip } from './LightTooltip';\nimport LocalBarIcon from '@material-ui/icons/LocalBar';\nimport WeekendIcon from '@material-ui/icons/Weekend';\nimport { useAuthorize, Authorize } from 'authzyin.js';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n      margin: theme.spacing(1),\n    },\n}));\n\nconst toolTipTitle = (place: Place, authorized: boolean) => {\n    return (\n        <>\n            <Typography color=\"inherit\">{place.name}</Typography>\n            <Typography color=\"secondary\">{`accepts ${place.acceptedPaymentMethods[0].toString()}`}</Typography>\n            <Typography color=\"secondary\">{IsAgeLimitedPlace(place) && `Age:${place.minAge}-${place.maxAge}`}</Typography>\n            <Typography color={authorized ? \"primary\" : \"error\"}>{authorized ? 'Authorized' : 'Not authorized'}</Typography>\n        </>\n    );\n};\n\nconst getIcon = (place: Place) => IsBar(place) ? <LocalBarIcon/> : <WeekendIcon/>;\n\ninterface PlaceProps {\n    place: Place;\n    buttonClass: string,\n    onEnterPlace: (authorized: boolean) => void;\n}\n\n/**\n * Use the useAuthorize hook to authorize\n * @param props props\n */\nconst PlaceWihtUseAuthorizeHook = (props: PlaceProps) => {\n    const authorize = useAuthorize();\n    const authorized = authorize(props.place.policy, props.place);\n\n    return (\n        <LightTooltip key={props.place.id} placement='top' arrow title={toolTipTitle(props.place, authorized)}>\n            <Button\n                variant=\"contained\"\n                className={props.buttonClass}\n                color = {authorized ? \"primary\" : \"secondary\"}\n                startIcon={getIcon(props.place)}\n                onClick={() => props.onEnterPlace(authorized)}\n            >\n                {props.place.name}\n            </Button>\n        </LightTooltip>\n    );\n}\n\n/**\n * Use the Authorize component to authorize, mimicing a class component behavior here\n * @param props props\n */\nconst PlaceWithAuthorizeComponent = (props: PlaceProps) => {\n    return (\n        <Authorize policy={props.place.policy} resource={props.place}>\n            {\n                // This function is used as the \"render props (as children)\" to the Authorize component.\n                (authorized) => (\n                    <LightTooltip key={props.place.id} placement='top' arrow title={toolTipTitle(props.place, authorized)}>\n                        <Button\n                            variant=\"contained\"\n                            className={props.buttonClass}\n                            color={authorized ? \"primary\" : \"secondary\"}\n                            startIcon={getIcon(props.place)}\n                            onClick={() => props.onEnterPlace(authorized)}\n                        >\n                            {props.place.name}\n                        </Button>\n                    </LightTooltip>\n                )\n            }\n        </Authorize>\n    );\n}\n\n/**\n * Render a place either using the useAuthorize or using the Authorize component based on id\n * @param { place }: place\n */\nexport const PlaceComponent = ({ place }: { place: Place }) => {\n    const classes = useStyles();\n    const { setAlert, setCurrentPlace, enterPlace } = useAppBoundActions();\n\n    const tryEnterPlace = (authorized: boolean) => {\n        setCurrentPlace(-1);\n        if (authorized) {\n            // invoke server api if client authorization succeeded or sneak in option is selected\n            enterPlace(place);\n        } else {\n            console.error(`Entering \"${place.name}\": not authorized`);\n            setAlert({\n                severity: Severity.Warn,\n                message: `Authorization failed - \"${place.name}\" forbidden by policy \"${place.policy}\"`,\n            });\n        }\n    }\n\n    return place.id % 2 === 0 ?\n        <PlaceWihtUseAuthorizeHook place={place} onEnterPlace={tryEnterPlace} buttonClass={classes.button}/> :\n        <PlaceWithAuthorizeComponent place={place} onEnterPlace={tryEnterPlace} buttonClass={classes.button}/>;\n};","import { AuthZyinContext } from 'authzyin.js';\nimport { Resource } from 'authzyin.js';\n\n/* ====================== Api contract definition =============================*/\nexport interface PaymentMethod{\n    type: string;\n    credit: number;\n}\n\nexport interface AuthorizationData {\n    age: number;\n    withDriversLicense: boolean;\n    withPassport: boolean;\n    paymentMethods: PaymentMethod[];\n}\n\nexport type SampleAuthZyinContext = AuthZyinContext<AuthorizationData>;\n\n/* ====================== Resource definition =============================*/\nexport interface Place extends Resource\n{\n    id: number;\n    name: string;\n    acceptedPaymentMethods: string[];\n    policy: string;\n}\n\nexport interface Bar extends Place\n{\n    hasHappyHour: boolean;\n}\n\nexport interface AgeLimitedPlace extends Place\n{\n    minAge: number;\n    maxAge: number;\n}\n\n/* ==================== Contract type guards =======================*/\n\nexport function IsBar(place: Place): place is Bar {\n    return (place as Bar).hasHappyHour !== undefined;\n}\n\nexport function IsAgeLimitedPlace(place: Place): place is AgeLimitedPlace {\n    return (place as AgeLimitedPlace).maxAge !== undefined;\n}","import * as React from 'react';\nimport { makeStyles, Card, CardHeader, CardContent, Typography } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { useAppBoundActions } from '../store/actions';\nimport { placesSelector } from '../store/selectors';\nimport { Place } from '../api/Contract';\nimport { AlertBanner } from './Alert';\nimport { PlaceComponent } from './PlaceComponent';\n\nconst useStyles = makeStyles(() => ({\n    placelist: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n}));\n\nexport const PlaceList = () => {\n    const classes = useStyles();\n    const places = useSelector(placesSelector);\n    const { getPlaces } = useAppBoundActions();\n\n    React.useEffect(() => {\n        getPlaces();\n    }, [getPlaces]);\n\n    if (places && places.length >= 0) {\n        const placesInfo = places.map((place: Place) => (<PlaceComponent key={place.id} place={place} />));\n    \n        return (\n            <Card variant=\"outlined\">\n                <CardHeader title='Local places nearby you' />\n                <CardContent>\n                    <Typography variant=\"subtitle1\" component=\"div\">Hover to see more details. Click to enter</Typography>\n                    <div className={classes.placelist}>\n                        {placesInfo}\n                    </div>\n                    <AlertBanner />\n                </CardContent>\n            </Card>\n        );\n    };\n\n    return <></>;\n};\n","import * as React from 'react';\nimport { AuthContext } from './AuthContext';\nimport { User } from './User';\nimport { PlaceList } from './PlaceList';\nimport { Grid, Typography } from '@material-ui/core';\nimport { useAuthZyinContext } from 'authzyin.js';\nimport { AuthorizationData } from '../api/Contract';\n\nexport const Home = () => {\n    const context = useAuthZyinContext<AuthorizationData>();\n\n    return (\n        <div>\n            <Typography variant=\"h2\" component=\"h2\">\n                Welcome {context.userContext.userName}!\n            </Typography>\n            <Grid container direction='column' justify='center' alignItems='stretch'>\n                <Grid item xl={12}>\n                    <PlaceList />\n                </Grid>\n                <Grid item xl={12}>\n                    <User />\n                </Grid>\n                <Grid item xl={12}>\n                    <AuthContext data={context} />\n                </Grid>\n            </Grid>\n        </div>\n    );\n};","import * as React from 'react';\nimport { createMuiTheme, MuiThemeProvider, makeStyles } from '@material-ui/core/styles';\nimport { Paper, Container } from '@material-ui/core';\nimport { initializeAuthZyinContext, AuthZyinProvider } from 'authzyin.js';\nimport { Home } from './components/Home';\nimport { policiesApi } from './api/Api';\n\n// dark theme\nexport const darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n    },\n});\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n}));\n\n// Initialize authzyin context globally\ninitializeAuthZyinContext();\n\nexport default () => {\n    const classes = useStyles();\n\n    return (\n        // Sign in succeeded, render main content wrapped with AuthZyinProvider\n        <AuthZyinProvider options={{ url: policiesApi }}>\n            <Container>\n                <MuiThemeProvider theme={darkTheme}>\n                    <Paper className={classes.root}>\n                        <Home />\n                    </Paper>\n                </MuiThemeProvider>\n            </Container>\n        </AuthZyinProvider>\n    );\n};\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const url = process.env.PUBLIC_URL as string;\n        const publicUrl = new URL(url, window.location.toString());\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing as ServiceWorker;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {sampleStore} from './store/store';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n    <Provider store={sampleStore}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}